package variable

import (
	"fmt"
	"time"
)

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Concurrency ‡∏´‡∏£‡∏∑‡∏≠ routine ‡∏Ç‡∏≠‡∏á go
// ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ go ‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á function ‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ function ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
func IsLoopString(String string) {
	for i := 0; i < 100; i++ {
		fmt.Println(String, ":", i)
	}
}

func processOne(c chan string, text string) {
	c <- text //‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏≤‡∏Å text ‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô c ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á ch ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤
	c <- "10" // ‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤
}

func ShowChannel() {
	// ‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á go ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å routine ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö ‡∏Ç‡∏ô‡∏≤‡∏ô ‡πÅ‡∏ö‡∏ö‡∏ó‡∏≥‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÜ‡∏Å‡∏±‡∏ô

	// ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
	// IsLoopString("ü¶Ñ")
	// IsLoopString("üêä")

	// ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö routine *‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á go ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà time.Sleep ‡∏¢‡∏±‡∏á‡∏á‡∏±‡πâ‡∏ô‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å
	// go IsLoopString("üê≤")
	// go IsLoopString("ü¶ù")
	// go IsLoopString("üê≥")
	// time.Sleep(10 * time.Second) //‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô

	//----------------------------------------------------------------------------------------------------------
	// make ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á chan, slice, map | make(chan string, 1) ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠ Buffered Channel ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏£‡∏∞‡∏ö‡∏∏‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏•‡∏á Channel
	ch := make(chan string)  // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á make ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á channel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö string ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö Unbuffered Channel
	go processOne(ch, "Ten") // ‡πÉ‡∏ä‡πâ Goroutine ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î deadlock!
	fmt.Println(<-ch)        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤ ch ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ chan ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö
	fmt.Println(<-ch)        // chan ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö
	time.Sleep(5 * time.Second)
}
